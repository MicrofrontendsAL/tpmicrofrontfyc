"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = singleSpaSvelte;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var defaultOpts = {
  // required opts
  component: null,
  // optional opts
  domElementGetter: null,
  props: {}
};

function singleSpaSvelte(userOpts) {
  if (_typeof(userOpts) !== "object") {
    throw new Error("single-spa-svelte requires a configuration object");
  }

  var opts = _objectSpread(_objectSpread({}, defaultOpts), userOpts);

  if (!opts.component) {
    throw new Error("single-spa-svelte must be passed opts.component");
  } // Just a shared object to store the mounted object state


  var mountedInstances = {};
  return {
    bootstrap: bootstrap.bind(null, opts, mountedInstances),
    mount: mount.bind(null, opts, mountedInstances),
    unmount: unmount.bind(null, opts, mountedInstances),
    update: update.bind(null, opts, mountedInstances)
  };
}

function bootstrap(opts) {
  return Promise.resolve();
}

function mount(opts, mountedInstances, singleSpaProps) {
  var defaultOptKeys = Object.keys(defaultOpts);
  var svelteOpts = Object.keys(opts).reduce(function (object, key) {
    if (!defaultOptKeys.includes(key)) {
      object[key] = opts[key];
    }

    return object;
  }, {});
  return Promise.resolve().then(function () {
    var domElementGetter = chooseDomElementGetter(opts, singleSpaProps);
    var domElement = domElementGetter(); // See https://svelte.dev/docs#Creating_a_component

    mountedInstances.instance = new opts.component(_objectSpread(_objectSpread({}, svelteOpts), {}, {
      target: domElement,
      props: Object.assign({}, singleSpaProps, opts.props)
    }));
  });
}

function unmount(opts, mountedInstances) {
  return Promise.resolve().then(function () {
    mountedInstances.instance.$destroy ? mountedInstances.instance.$destroy() : mountedInstances.instance.destroy();
  });
}

function update(opts, mountedInstances, props) {
  return Promise.resolve().then(function () {
    mountedInstances.instance.$set ? mountedInstances.instance.$set(props) : mountedInstances.instance.set(props);
  });
}

function chooseDomElementGetter(opts, props) {
  props = props && props.customProps ? props.customProps : props;

  if (props.domElement) {
    return function () {
      return props.domElement;
    };
  } else if (props.domElementGetter) {
    return function () {
      return props.domElementGetter(props);
    };
  } else if (opts.domElementGetter) {
    return function () {
      return opts.domElementGetter(props);
    };
  } else {
    return defaultDomElementGetter(props);
  }
}

function defaultDomElementGetter(props) {
  var appName = props.appName || props.name;

  if (!appName) {
    throw Error("single-spa-svelte was not given an application name as a prop, so it can't make a unique dom element container for the svelte application");
  }

  var htmlId = "single-spa-application:".concat(appName);
  return function defaultDomEl() {
    var domElement = document.getElementById(htmlId);

    if (!domElement) {
      domElement = document.createElement("div");
      domElement.id = htmlId;
      document.body.appendChild(domElement);
    }

    return domElement;
  };
}

//# sourceMappingURL=single-spa-svelte.js.map